{
  "typeAcquisition": { "enable": true },
  "compilerOptions": {
    /* Generates corresponding '.d.ts' file. */
    "declaration": true,
    /* Do not emit outputs. Babel will emeit and typescript will do the tooling */
    "emitDeclarationOnly": true,
    /* Enable strict null checks. */
    "strictNullChecks": true,
    /* Enable strict checking of function types. */
    "strictFunctionTypes": true,
    /* Raise error on 'this' expressions with an implied 'any' type. */
    "noImplicitThis": true,
    /* Report errors on unused locals. */
    "noUnusedLocals": true,
    /* Report errors on unused parameters. */
    "noUnusedParameters": true,
    /* Report error when not all code paths in function return a value. */
    "noImplicitReturns": true,
    /* Report errors for fallthrough cases in switch statement. */
    "noFallthroughCasesInSwitch": true,
    /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "moduleResolution": "node",
    /* Base directory to resolve non-absolute module names. */
    "baseUrl": "./",
    /* List of folders to include type definitions from. */
    "typeRoots": ["types", "node_modules/@types"],
    /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "allowSyntheticDefaultImports": true,
    "outDir": "./dist"
  },
  "exclude": ["node_modules", "tests", "dist"],
  "include": ["./src/**/*.ts"]
}
